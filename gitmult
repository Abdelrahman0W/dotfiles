#!/usr/bin/env python

import os
import sys
import subprocess
from optparse import OptionParser
import imp
joblibFound = False
try:
    imp.find_module("joblib")
    joblibFound = True
    from joblib import Parallel, delayed
    import multiprocessing
except ImportError:
    print "joblib module is not available."
    joblibFound = False


# ---------------------------------------------
def getRepos(workspace):
    dirs = os.listdir(workspace)
    repos = []
    for d in dirs:
        if (os.path.isdir(os.path.join(workspace, d, ".git"))):
            repos.append(d)
    return repos


# ---------------------------------------------
def selectRepos(repos, selection):
    selrepos = []
    if len(selection) > 0:
        for s in selection:
            if s in repos:
                selrepos.append(s)
            else:
                printError("No repo " + s + ", Skipping.")
    else:
        selrepos = repos
    return selrepos


# ---------------------------------------------
def runCommand(workspace, repo, cmd, quiet=False):
    if not quiet:
        printAttr("- " + cmd, ["32"])
    # Run
    cmdcd = "cd " + os.path.join(workspace, repo) + ";"
    proc = subprocess.Popen(cmdcd + cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (out, err) = proc.communicate()
    # Strip
    out = out.strip()
    err = err.strip()
    # Convert err to out in some cases
    if detectUpToDate(err) or detectAlreadyOn(err) or detectSwitchedTo(err):
        if (len(out) == 0):
            out = err
        else:
            out += "\n" + err
        err = ""
    # Add prefix
    if len(out) > 0:
        tmp = out.split("\n")
        out = ""
        for t in tmp:
            out += "  " + t + "\n"
    if len(err) > 0:
        tmp = err.split("\n")
        err = ""
        for t in tmp:
            err += "! " + t + "\n"
    if len(err) > 0:
        printAttr(err, ["31"])
    else:
        print out
    return out


# ---------------------------------------------
def printAttr(text, attr):
    print "\x1b[%sm%s\x1b[0m" % (";".join(attr), text)


# ---------------------------------------------
def printError(text):
    printAttr("Error: " + text, ["31"])


# ---------------------------------------------
def detectUpToDate(text):
    if "Everything up-to-date" in text:
        return True
    if "Already up-to-date." in text:
        return True
    return False


# ---------------------------------------------
def detectAlreadyOn(text):
    if "Already on '" in text:
        return True
    return False


# ---------------------------------------------
def detectSwitchedTo(text):
    if "Switched to branch '" in text:
        return True
    return False


# ---------------------------------------------
# Options
# ---------------------------------------------
options = OptionParser(usage="usage %prog git_command [repo1] [repo2] ...",
                       description=("Executes the given git command in multiple SARA repo repositories. You can skip "
                                    "the sara_ prefix in the repo name."))
options.add_option("-t", "--target-workspace", type="string", help="which workspace to use")
options.add_option("-s", "--single-core-execution", action="store_true", dest="single")


# ---------------------------------------------
# Main
# ---------------------------------------------
def main():
    opts, args = options.parse_args()

    if (len(args) < 1):
        printError("No git command given.")
        sys.exit(-1)
    gitcmd = args[0]

    # Get workspace
    workspace = os.getcwd()
    print "Using workspace: " + workspace

    # Get repos in the workspace
    repos = getRepos(workspace)

    # Select only the indicated repos
    selRepos = selectRepos(repos, args[1:])

    # Run commands for each repo
    def processRepo(repo):
        printAttr(repo, ["33", "1"])
        printAttr("-" * len(repo), ["33", "1"])
        runCommand(workspace, repo, "git " + gitcmd)
        print
    print
    if joblibFound and not opts.single:
        pool = Parallel(n_jobs=multiprocessing.cpu_count())
        pool(delayed(runCommand)(workspace, repo, "git " + gitcmd) for repo in selRepos)
    else:
        for repo in selRepos:
            processRepo(repo)


if __name__ == "__main__":
    main()
